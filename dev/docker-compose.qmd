---
title: "Docker Compose for Dev/Test"
format:
  html:
    toc: true
    toc-location: left
---

> ‚ö†Ô∏è **Warning**: Do not deploy this setup to production. This configuration is meant solely for **local development and
testing**.

> üõ°Ô∏è **Ensure your firewall is enabled** on the machine running this setup (e.g., `ufw` on Linux). Running this
> deployment without a firewall can lead to **data leaks** or **insecure access** to internal institutional
> directories (
> especially if LDAP is enabled).

---

## üîç Choosing the Components

Before you start, review the components available in [map/components.qmd](../map/components.qmd) and decide which ones
you need.

The main Compose file ([docker/docker-compose.yaml](../../docker/docker-compose.yaml)) is modular. It uses the `include`
directive and **profiles** to enable only selected components.

<details><summary>Main docker-compose.yaml</summary>
```yaml
{{< include "../docker/docker-compose.yaml" >}}
```
</details>

For example:

```bash
docker compose \
  --profile neo4j \
  --profile apollo \
  --profile crisalid-bus \
  --profile harvester \
  --profile ikg \
  up
```

---

## üß∞ Preparation Steps

### 1. üßæ `.env` Files

Each directory under `docker/` (e.g. `apollo`, `crisalid-bus`, `ikg`, `neo4j`, `cdb`, `harvester`) has its own
`.env.sample` file.

* Copy each `.env.sample` to `.env`
* Fill in appropriate values (hostnames, ports, secrets, etc.)
* The main `docker/.env.sample` includes values used by multiple components (like RabbitMQ or Neo4j credentials)

> If you plan to connect the CRISalid Directory Bridge (`cdb`) to your institutional LDAP, make sure to set:
>
> ```env
> LDAP_HOST=
> LDAP_BIND_DN=
> LDAP_BIND_PASSWORD=
> ```

### 2. üîß Configure CRISalid Bus

This script reads the `.env` values and generates the RabbitMQ `definitions.json` file (exchanges, queues, admin user,
etc.).

```bash
./docker/configure_crisalid_bus.sh
```

### 3. üîß Configure CRISalid Directory Bridge (CDB)

This script clones the DAGs and runs the Airflow initialization:

```bash
./docker/configure_cdb.sh
```

‚ÑπÔ∏è In dev, Airflow GUI admin credentials are set to `admin:admin`.

After running the script, if you intend to use the **CSV mode** for structures and people (instead of LDAP), place your
data files in:

```
docker/cdb/data/
‚îú‚îÄ‚îÄ structure.csv
‚îî‚îÄ‚îÄ people.csv
```

Sample CSVs:

* [`docker/cdb/dags/data`](../../docker/cdb/dags/data)

Full documentation (in French):

* [Laboratories](https://www.esup-portail.org/wiki/spaces/ESUPCRISalid/pages/1478328327/Import+des+donn%C3%A9es+structures)
* [Researchers](https://www.esup-portail.org/wiki/spaces/ESUPCRISalid/pages/1478328329/Import+des+donn%C3%A9es+chercheurs)

---

## üîå Communication with Host Machine

If you want to connect external tools (on your host) to the containers, open the necessary ports.

For example, to expose RabbitMQ's AMQP port, edit `docker/crisalid-bus/crisalid-bus.yaml` and uncomment the
2nd `ports` line:

```yaml
ports:
  - "${CRISALID_BUS_HTTP_PORT}:15672"
  # - "${CRISALID_BUS_AMQP_PORT}:5672"
expose:
  - "${CRISALID_BUS_AMQP_PORT}"
```

---

## ‚ôªÔ∏è Resetting Containers

To stop and delete containers + volumes for one profile:

```bash
docker compose --profile cdb down --volumes
```

To also delete images:

```bash
docker compose --profile cdb down --volumes --rmi all
```

---

## üöÄ Starting the Services

To start the services, run:

```bash
docker compose --profile neo4j --profile apollo --profile crisalid-bus --profile harvester --profile ikg --profile cdb up
```

This command will start the selected components in the background. You can add or remove profiles as needed.

## ‚úÖ Next Steps

Once your services are up, follow the component-specific instructions in each section of the documentation. You can now:

* Access the CRISalid Directory Bridge (CDB) UI at
  [http://localhost:8080](http://localhost:8080) (Airflow) and trigger DAGs to import structures and people
* Access the Neo4j UI at [http://localhost:7474](http://localhost:7474) and explore the graph database
* Access the RabbitMQ UI at [http://localhost:15672](http://localhost:15672) with credentials from `docker/.env` and
  monitor messages
* Access SVP Harvester at [http://localhost:8000](http://localhost:8000) to monitor publication harvesting
* Access the Apollo GraphQL UI at [http://localhost:4000/graphql](http://localhost:4000/graphql) to explore the API
  through
  Apollo GUI
* Start connecting other CRISalid modules from the host machine

üß≠ Back to [Development Index](index.qmd)
