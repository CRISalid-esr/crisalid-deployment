[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to CRISalid Deployment Documentation",
    "section": "",
    "text": "CRISalid is a modular set of open-source components designed to support the development of an institutional Current Research Information System (CRIS).\nIt is built to be message-oriented, modular, and loosely coupled. Each component communicates with others through asynchronous messaging (via RabbitMQ), while also exposing classical REST or GraphQL APIs to allow service-oriented approaches."
  },
  {
    "objectID": "index.html#development-test-deployment",
    "href": "index.html#development-test-deployment",
    "title": "Welcome to CRISalid Deployment Documentation",
    "section": "üß™ Development & Test Deployment",
    "text": "üß™ Development & Test Deployment\nUse this if you‚Äôre:\n\nWorking on a specific CRISalid module\nTesting integration locally\nEvaluating CRISalid for your institution\n\nWe provide:\n\nDocker Compose examples\nManual installation instructions (e.g., for deploying on virtual machines)\n\n‚Üí Explore Development & Test Deployment"
  },
  {
    "objectID": "index.html#production-deployment",
    "href": "index.html#production-deployment",
    "title": "Welcome to CRISalid Deployment Documentation",
    "section": "üöÄ Production Deployment",
    "text": "üöÄ Production Deployment\nFor institutional or production-grade deployments.\nWhile Kubernetes is the primary target, it is not required ‚Äî you may still use Docker or manual setups if needed.\nWe provide:\n\nShell scripts to generate Kubernetes manifests\nManual installation instructions for production environments\n\n‚Üí Explore Production Deployment"
  },
  {
    "objectID": "dev/docker-compose.html",
    "href": "dev/docker-compose.html",
    "title": "Docker Compose for Dev/Test",
    "section": "",
    "text": "‚ö†Ô∏è Warning: Do not deploy this setup to production. This configuration is meant solely for local development and testing."
  },
  {
    "objectID": "dev/docker-compose.html#choosing-the-components",
    "href": "dev/docker-compose.html#choosing-the-components",
    "title": "Docker Compose for Dev/Test",
    "section": "üîç Choosing the Components",
    "text": "üîç Choosing the Components\nBefore you start, review the components available in map/components.qmd and decide which ones you need.\nThe main Compose file (docker/docker-compose.yaml) is modular. It uses the include directive and profiles to enable only selected components.\n\n\nMain docker-compose.yaml\n\nname: crisalid\n\ninclude:\n  - path: ./neo4j/neo4j.yaml\n    env_file: ./neo4j/.env\n    project_directory: ./neo4j\n  - path: ./apollo/apollo.yaml\n    env_file: ./apollo/.env\n    project_directory: ./apollo\n  - path: ./crisalid-bus/crisalid-bus.yaml\n    env_file: ./crisalid-bus/.env\n    project_directory: ./crisalid-bus\n  - path: ./harvester/harvester.yaml\n    env_file: ./harvester/.env\n    project_directory: ./harvester\n  - path: ./ikg/ikg.yaml\n    env_file: ./ikg/.env\n    project_directory: ./ikg\n  - path: ./cdb/cdb.yaml\n    env_file: ./cdb/.env\n    project_directory: ./cdb\n  - path: ./sovisuplus/sovisuplus.yaml\n    env_file: ./sovisuplus/.env\n    project_directory: ./sovisuplus\n  - path: ./keycloak/keycloak.yaml\n    env_file: ./keycloak/.env\n    project_directory: ./keycloak\n\nFor example:\ndocker compose \\\n  --profile neo4j \\\n  --profile apollo \\\n  --profile crisalid-bus \\\n  --profile harvester \\\n  --profile ikg \\\n  --profile cdb \\\n  --profile keycloak \\\n  --profile sovisuplus \\\n  up"
  },
  {
    "objectID": "dev/docker-compose.html#preparation-steps",
    "href": "dev/docker-compose.html#preparation-steps",
    "title": "Docker Compose for Dev/Test",
    "section": "üß∞ Preparation Steps",
    "text": "üß∞ Preparation Steps\n\n1. üßæ .env Files\nEach directory under docker/ (e.g.¬†apollo, crisalid-bus, ikg, neo4j, cdb, harvester) has its own .env.sample file.\n\nCopy each .env.sample to .env\nFill in appropriate values (hostnames, ports, secrets, etc.)\nThe main docker/.env.sample includes values used by multiple components (like RabbitMQ or Neo4j credentials)\n\n\nIf you plan to connect the CRISalid Directory Bridge (cdb) to your institutional LDAP, make sure to set:\nLDAP_HOST=\nLDAP_BIND_DN=\nLDAP_BIND_PASSWORD=\n\n\n\n2. üîß Configure CRISalid Bus\nThis script reads the .env values and generates the RabbitMQ definitions.json file (exchanges, queues, admin user, etc.).\n./docker/configure_crisalid_bus.sh\n\n\n3. üîß Configure CRISalid Directory Bridge (CDB)\nThis script clones the DAGs and runs the Airflow initialization:\n./docker/configure_cdb.sh\n‚ÑπÔ∏è In dev, Airflow GUI admin credentials are set to admin:admin.\nAfter running the script, if you intend to use the CSV mode for structures and people (instead of LDAP), place your data files in:\ndocker/cdb/data/\n‚îú‚îÄ‚îÄ structure.csv\n‚îî‚îÄ‚îÄ people.csv\nSample CSVs:\n\ndocker/cdb/dags/data\n\nFull documentation (in French):\n\nLaboratories\nResearchers\n\n\n\n\n4. üîë Configure Keycloak\nKeycloak is handling authentication within the system. Multiple client applications (such as Sovisu+) can share the same authentication realm. To set up Keycloak in this environment, follow these steps:\n\nGlobal .env Configuration\n\nIn the global .env file, you will find the shared Keycloak configuration variables, such as the realm name (KEYCLOAK_REALM) and the client secrets (SOVISUPLUS_KEYCLOAK_CLIENT_SECRET). The KEYCLOAK_REALM can be customized (e.g., crisalid-my-university) for readability.\nExample:\nKEYCLOAK_REALM=crisalid-inst\nSOVISUPLUS_KEYCLOAK_CLIENT_SECRET=BFl0E9p9X5FryyffGhI0lqgUNSf5rTWB\n\nKeycloak Configuration Script\n\nRun the ./configure_keycloak.sh script. This will create the required configuration file from the template (docker/keycloak/config/crisalid-inst.template.json).\n\nCustomizing Keycloak .env Settings\n\nThe docker/keycloak/.env.sample file provides the environment settings for Keycloak, such as the admin credentials and database configurations. Copy the sample file to .env and modify the settings as needed.\nKEYCLOAK_ADMIN=admin\nKEYCLOAK_ADMIN_PASSWORD=admin\nKEYCLOAK_DB_VENDOR=postgres\nKEYCLOAK_DB_HOST=keycloak-db\nKEYCLOAK_DB_PORT=5432\nKEYCLOAK_DB_NAME=keycloak\nKEYCLOAK_DB_USER=keycloak\nKEYCLOAK_DB_PASSWORD=keycloak\n\nStart Keycloak with Docker Compose\n\nOnce your configuration is ready, ensure to include the keycloak profile in your Docker Compose command:\ndocker compose \\\n[... other profiles] ...] \\\n  --profile keycloak \\\n  up"
  },
  {
    "objectID": "dev/docker-compose.html#communication-with-host-machine",
    "href": "dev/docker-compose.html#communication-with-host-machine",
    "title": "Docker Compose for Dev/Test",
    "section": "üîå Communication with Host Machine",
    "text": "üîå Communication with Host Machine\nIf you want to connect external tools (on your host) to the containers, open the necessary ports.\nFor example, to expose RabbitMQ‚Äôs AMQP port, edit docker/crisalid-bus/crisalid-bus.yaml and uncomment the 2nd ports line:\nports:\n  - \"${CRISALID_BUS_HTTP_PORT}:15672\"\n  - \"${CRISALID_BUS_AMQP_PORT}:5672\"\nexpose:\n  - \"${CRISALID_BUS_HTTP_PORT}\"\n#  - \"${CRISALID_BUS_AMQP_PORT}\""
  },
  {
    "objectID": "dev/docker-compose.html#resetting-containers",
    "href": "dev/docker-compose.html#resetting-containers",
    "title": "Docker Compose for Dev/Test",
    "section": "‚ôªÔ∏è Resetting Containers",
    "text": "‚ôªÔ∏è Resetting Containers\nTo stop and delete containers + volumes for one profile:\ndocker compose --profile cdb down --volumes\nTo also delete images:\ndocker compose --profile cdb down --volumes --rmi all"
  },
  {
    "objectID": "dev/docker-compose.html#starting-the-services",
    "href": "dev/docker-compose.html#starting-the-services",
    "title": "Docker Compose for Dev/Test",
    "section": "üöÄ Starting the Services",
    "text": "üöÄ Starting the Services\nTo start the services, run:\ndocker compose --profile neo4j --profile apollo --profile crisalid-bus --profile harvester --profile ikg --profile cdb --profile keycloak --profile sovisuplus up\nThis command will start the selected components in the background. You can add or remove profiles as needed."
  },
  {
    "objectID": "dev/docker-compose.html#next-steps",
    "href": "dev/docker-compose.html#next-steps",
    "title": "Docker Compose for Dev/Test",
    "section": "‚úÖ Next Steps",
    "text": "‚úÖ Next Steps\nOnce your services are up, follow the component-specific instructions in each section of the documentation. You can now:\n\nAccess the CRISalid Directory Bridge (CDB) UI at http://localhost:8080 (Airflow) and trigger DAGs to import structures and people\nAccess the Neo4j UI at http://localhost:7474 and explore the graph database\nAccess the RabbitMQ UI at http://localhost:15672 with credentials from docker/.env and monitor messages\nAccess SVP Harvester at http://localhost:8000 to monitor publication harvesting\nAccess the Apollo GraphQL UI at http://localhost:4000/graphql to explore the API through Apollo GUI\nAccess Keycloak at http://localhost:8081 to manage users and roles\nAccess SoVisu+ at http://localhost:3000 to visualize your data\nStart connecting other CRISalid modules from the host machine\n\nüß≠ Back to Development Index"
  }
]